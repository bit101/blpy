# This was directly ported from my golang version (bitlib/noise)
# Did some quick testing of 2d simplex, but thats all so far
# likely bugs here.


def fastFloor(x):
    if x > 0:
        return int(x)
    return int(x) - 1

perm = [ 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180, 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]


def grad1(hsh, x):
    h = hsh & 15
    grad = 1 + h & 7
    if h & 8 != 0:
        grad = -grad
    return grad * x 

def grad2(hsh, x, y):
    h = hsh & 7
    u = x if h < 4 else y
    v = y if h < 4 else x
    return (-u if h & 1 != 0 else u) + (-2 * v if h & 2 != 0 else 2 * v)

def grad3(hsh, x, y, z):
    h = hsh & 15
    u = q(h < 8, x, y)
    v = q(h < 4, y, q(h == 12 or h == 14, x, z))
    return (-u if h & 1 != 0 else u) + (-v if h & 2 != 0 else v)

def simplex1(x):
    i0 = fastFloor(x)
    i1 = i0 + 1
    x0 = x - i0
    x1 = x0 - 1

    t0 = 1 - x0 * x0
    t0 *= t0
    n0 = t0 * t0 * grad1(perm[i0 & 0xff], x0)

    t1 = 1 - x1 * x1
    t1 *= t1
    n1 = t1 * t1 * grad1(perm[i1 & 0xff], x1)
    return (n0 + n1 + 0.076368899) / 2.45488110001

def simplex2(x, y):
    F2 = 0.366025403 
    G2 = 0.211324865

    s = (x + y) * F2
    xs = x + s
    ys = y + s
    i = fastFloor(xs)
    j = fastFloor(ys)

    t = (i + j) * G2
    X0 = i - t
    Y0 = j - t
    x0 = x - X0 
    y0 = y - Y0

    if x0 > y0:
        i1 = 1
        j1 = 0
    else:
        i1 = 0
        j1 = 1

    x1 = x0 - i1 + G2
    y1 = y0 - j1 + G2
    x2 = x0 - 1 + 2 * G2
    y2 = y0 - 1 + 2 * G2

    ii = i & 0xff
    jj = j & 0xff

    t0 = 0.5 - x0 * x0 - y0 * y0
    if t0 < 0:
        n0 = 0
    else:
        t0 *= t0
        n0 = t0 * t0 * grad2(perm[ii + perm[jj]], x0, y0)

    t1 = 0.5 - x1 * x1 - y1 * y1
    if t1 < 0:
        n1 = 0
    else:
        t1 *= t1
        n1 = t1 * t1 * grad2(perm[ii + i1 + int(perm[jj + j1])], x1, y1)

    t2 = 0.5 - x2 * x2 - y2 * y2
    if t2 < 0:
        n2 = 0
    else:
        t2 *= t2
        n2 = t2 * t2 * grad2(perm[ii+1+int(perm[jj+1])], x2, y2)

    return (n0 + n1 + n2) / 0.022108854818853867

def Simplex3(x, y, z):
    F3 = 0.333333333
    G3 = 0.166666667

    s = (x + y + z) * F3
    xs = x + s
    ys = y + s
    zs = z + s
    i = fastFloor(xs)
    j = fastFloor(ys)
    k = fastFloor(zs)

    t = (i+j+k) * G3
    X0 = i - t
    Y0 = j - t
    Z0 = k - t
    x0 = x - X0 
    y0 = y - Y0
    z0 = z - Z0

    if x0 >= y0:
        if y0 >= z0:
            i1 = 1
            j1 = 0
            k1 = 0
            i2 = 1
            j2 = 1
            k2 = 0
        elif x0 >= z0:
            i1 = 1
            j1 = 0
            k1 = 0
            i2 = 1
            j2 = 0
            k2 = 1
        else:
            i1 = 0
            j1 = 0
            k1 = 1
            i2 = 1
            j2 = 0
            k2 = 1
    else:
        if y0 < z0:
            i1 = 0
            j1 = 0
            k1 = 1
            i2 = 0
            j2 = 1
            k2 = 1
        elif x0 < z0:
            i1 = 0
            j1 = 1
            k1 = 0
            i2 = 0
            j2 = 1
            k2 = 1
        else:
            i1 = 0
            j1 = 1
            k1 = 0
            i2 = 1
            j2 = 1
            k2 = 0

    x1 = x0 - i1 + G3
    y1 = y0 - j1 + G3
    z1 = z0 - k1 + G3
    x2 = x0 - i2 + 2 * G3
    y2 = y0 - j2 + 2 * G3
    z2 = z0 - k2 + 2 * G3
    x3 = x0 - 1 + 3 * G3
    y3 = y0 - 1 + 3 * G3
    z3 = z0 - 1 + 3 * G3

    ii = i & 0xff
    jj = j & 0xff
    kk = k & 0xff

    t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0
    if t0 < 0:
        n0 = 0
    else:
        t0 *= t0
        n0 = t0 * t0 * grad3(perm[ii + int(perm[jj + int(perm[kk])])], x0, y0, z0)

    t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1
    if t1 < 0:
        n1 = 0
    else:
        t1 *= t1
        n1 = t1 * t1 * grad3(perm[ii+i1+int(perm[jj+j1+int(perm[kk+k1])])], x1, y1, z1)

    t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2
    if t2 < 0:
        n2 = 0
    else:
        t2 *= t2
        n2 = t2 * t2 * grad3(perm[ii + i2+int(perm[jj + j2 + int(perm[kk + k2])])], x2, y2, z2)

    t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3
    if t3 < 0:
        n3 = 0
    else:
        t3 *= t3
        n3 = t3 * t3 * grad3(perm[ii+1+int(perm[jj+1+int(perm[kk+1])])], x3, y3, z3)

    return (n0 + n1 + n2 + n3) / 0.030555466710745972
